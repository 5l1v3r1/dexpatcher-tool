/*
 * DexPatcher - Copyright 2015-2019 Rodrigo Balerdi
 * (GNU General Public License version 3 or later)
 *
 * DexPatcher is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 */

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

group = parent.group
version = parent.version

sourceCompatibility = '1.7'
def jdk = findProperty('JDK7_HOME') ?: '/usr/lib/jvm/java-7-openjdk-amd64'
def jdk_rt = new File(jdk, 'jre/lib/rt.jar')
if (jdk_rt.exists()) compileJava.options.bootstrapClasspath = files(jdk_rt)

repositories {
    jcenter()

    // Use local version of multidexlib2:
    flatDir dirs: '../../multidexlib2/build/libs'
}

def dexlib2Version = '2.3.4'
def multidexlib2VersionSuffix = ''

def multidexlib2Version = dexlib2Version + multidexlib2VersionSuffix

dependencies {
    implementation 'commons-cli:commons-cli:1.2'
    implementation 'com.github.lanchon.dexpatcher:multidexlib2:' + multidexlib2Version

    // Use local version of multidexlib2:
    implementation 'org.smali:dexlib2:' + dexlib2Version
}

compileJava {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

task writeVersionFile {
    ext.version = version
    ext.outputFile = file('build/classes/main/lanchon/dexpatcher/version')
    dependsOn compileJava
    inputs.property 'version', { ext.version }
    outputs.file { ext.outputFile }
    doLast {
        ext.outputFile.text = "${ext.version}"
    }
}
jar.dependsOn writeVersionFile

jar {
    archiveBaseName.set 'dexpatcher-tool'
    manifest {
        attributes(
                'Implementation-Title': 'DexPatcher-tool',
                'Implementation-Version': project.version,
                'Main-Class': 'lanchon.dexpatcher.Main'
        )
    }
    reproducibleFileOrder = true
    preserveFileTimestamps = false
    duplicatesStrategy = DuplicatesStrategy.FAIL
}

// The Shadow plugin erroneously unpacks nested jars.
// The issue can be worked around by double-jarring the jars.
task shadowBugWorkaround(type: Jar) {
    destinationDirectory.set layout.buildDirectory.dir('shadow-bug-workaround')
    archiveBaseName.set 'nested-content'
    from jar
    from tasks.getByPath(':annotation:jar')
}

shadowJar {
    archiveBaseName.set 'dexpatcher'
    archiveClassifier.set null
    exclude 'META-INF/**'
    from 'extras'
    //from jar
    //from tasks.getByPath(':annotation:jar')
    from shadowBugWorkaround
    reproducibleFileOrder = true
    preserveFileTimestamps = false
    duplicatesStrategy = DuplicatesStrategy.FAIL
}
assemble.dependsOn shadowJar
