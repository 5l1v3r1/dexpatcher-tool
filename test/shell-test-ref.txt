$ d8 --no-desugaring --output build/source.dex.zip source/build/libs/source.jar

$ d8 --no-desugaring --output build/patch.dex.zip patch/build/libs/patch.jar

$ dexpatcher --help
DexPatcher version 1.8.0-alpha3 by Lanchon (https://dexpatcher.github.io/)

usage: dexpatcher [<option> ...] [--output <patched-dex-or-dir>]
                  <source-dex-apk-or-dir> [<patch-dex-apk-or-dir> ...]

main options:
 -?,--help                    print this help message and exit
 -a,--api-level <n>           android api level (default: auto-detect)
    --annotations <package>   package name of DexPatcher annotations
                              (default: 'lanchon.dexpatcher.annotation')
 -d,--debug                   output debugging information
    --dry-run                 do not write output files (much faster)
 -J,--multi-dex-jobs <n>      multi-dex thread count (implies: -m -M)
                              (default: available processors up to 4)
 -m,--multi-dex               enable multi-dex support
 -M,--multi-dex-threaded      multi-threaded multi-dex (implies: -m)
    --max-dex-pool-size <n>   maximum size of dex pools (default: 65536)
    --no-auto-ignore          no trivial default constructor auto-ignore
 -o,--output <dex-or-dir>     name of output file or directory
 -p,--path                    output relative paths of source code files
 -P,--path-root <root>        output absolute paths of source code files
 -q,--quiet                   do not output warnings
    --stats                   output timing statistics
 -v,--verbose                 output extra information
    --version                 print version information and exit

code transform options:
    --code-marker <marker>    identifier code marker (default: '_$$_')
    --deanon-patches <plan>   deanonymize anonymous classes in patches
    --deanon-source <plan>    deanonymize anonymous classes in source
    --decode-output           decode identifiers in output
    --decode-patches          decode identifiers in patches
    --decode-source           decode identifiers in source
    --no-anon-errors          treat anonymizer errors as warnings
    --no-decode-errors        treat decoder errors as warnings
    --pre-transform <set>     add pre-transform stages (default: 'out')
                              (<set>: 'none'|'dry'|'out'|'inout'|'all')
    --reanon-output <plan>    reanonymize anonymous classes in output
    --reanon-patches <plan>   reanonymize anonymous classes in patches
    --reanon-source <plan>    reanonymize anonymous classes in source


$ dexpatcher build/source.dex.zip build/patch.dex.zip --output build/patched.dex --deanon-source Anon\[_Level\] --reanon-output Anon\[_Level\] --deanon-patches \[_\]_patch --no-anon-errors --decode-source --decode-patches --no-decode-errors --debug
DexPatcher version 1.8.0-alpha3 by Lanchon (https://dexpatcher.github.io/)
info: read 'build/source.dex.zip'
debug: read 'build/source.dex.zip': file 'classes.dex': 33 types
debug: read 'build/source.dex.zip': dex version '035'
info: read 'build/patch.dex.zip'
debug: read 'build/patch.dex.zip': file 'classes.dex': 30 types
debug: read 'build/patch.dex.zip': dex version '035'
debug: deanonymize source: type 'test.Main$AnonymousClasses$1$1$Inner': deanonymized to 'test.Main$AnonymousClasses$Anon1$Anon1_Level2$Inner'
debug: deanonymize source: type 'test.Main$AnonymousClasses$1$1': deanonymized to 'test.Main$AnonymousClasses$Anon1$Anon1_Level2'
debug: deanonymize source: type 'test.Main$AnonymousClasses$1': deanonymized to 'test.Main$AnonymousClasses$Anon1'
debug: deanonymize source: type 'test.Main$AnonymousClasses$Anon1$1': deanonymized to 'test.Main$AnonymousClasses$Anon1_Level2$Anon1_Level2'
debug: deanonymize source: type 'test.Main$AnonymousClasses$Anon1$Anon1_Level2': deanonymized to 'test.Main$AnonymousClasses$Anon1_Level2$Anon1_Level4'
debug: deanonymize source: type 'test.Main$AnonymousClasses$Anon1': deanonymized to 'test.Main$AnonymousClasses$Anon1_Level2'
debug: decode source: type 'test.Main$__ClassVoid_$$_void__': decoded to 'test.Main$void'
debug: type 'test.Main$A': (Main.java:0): replace
debug: type 'test.Main$Abstract': (Main.java:0): ignore
debug: deanonymize patch: type 'test.Main$AnonymousClasses$1': deanonymized to 'test.Main$AnonymousClasses$1_patch'
debug: type 'test.Main$AnonymousClasses$1_patch': (Main.java:0): add
debug: type 'test.Main$AnonymousClasses$Anon1$Anon1_Level2': (Main.java:0): edit
info: type 'test.Main$AnonymousClasses$Anon1$Anon1_Level2': method '<init>():void': (Main.java:792): implicit ignore of trivial default constructor
debug: type 'test.Main$AnonymousClasses$Anon1$Anon1_Level2': method '<init>():void': (Main.java:792): ignore
debug: type 'test.Main$AnonymousClasses$Anon1$Anon1_Level2': method 'run():void': (Main.java:795): replace
debug: type 'test.Main$AnonymousClasses$Anon1': (Main.java:0): edit
info: type 'test.Main$AnonymousClasses$Anon1': method '<init>():void': (Main.java:790): implicit ignore of trivial default constructor
debug: type 'test.Main$AnonymousClasses$Anon1': method '<init>():void': (Main.java:790): ignore
debug: decode patch: type 'test.Main$AnonymousClasses$__UnexpectedAnonymousClass_$$_42__': decoded to 'test.Main$AnonymousClasses$42'
debug: decode patch: annotation element value '__UnexpectedAnonymousClass_$$_42__': decoded to '42'
debug: type 'test.Main$AnonymousClasses$42': (Main.java:0): add
debug: type 'test.Main$AnonymousClasses': (Main.java:0): edit
info: type 'test.Main$AnonymousClasses': method '<init>():void': (Main.java:788): implicit ignore of trivial default constructor
debug: type 'test.Main$AnonymousClasses': method '<init>():void': (Main.java:788): ignore
debug: type 'test.Main$AnonymousClasses': method 'print():void': (Main.java:806): append
debug: type 'test.Main$B': (Main.java:0): edit
debug: type 'test.Main$B': field 'staticField:int': (Main.java:0): add
debug: type 'test.Main$B': field 'instanceField:int': (Main.java:0): add
debug: type 'test.Main$B': field 'privateKey:java.lang.String': (Main.java:0): edit
info: type 'test.Main$B': field 'privateKey:java.lang.String': (Main.java:0): 'private' modifier changed to 'public' in edited field
debug: type 'test.Main$B': method '<clinit>():void': (Main.java:101): add
debug: type 'test.Main$B': method '<init>():void': (Main.java:144): ignore
debug: type 'test.Main$B': method 'directMethod():void': (Main.java:153): replace
debug: type 'test.Main$B': method 'privateStaticMethod(int):void': (Main.java:113): edit
info: type 'test.Main$B': method 'privateStaticMethod(int):void': (Main.java:113): 'private' modifier changed to 'public' in edited method
debug: type 'test.Main$B': method 'source_virtualMethod(java.lang.String):void': (Main.java:162): edit
debug: type 'test.Main$B': method 'source_virtualMethod(java.lang.String):void': target 'virtualMethod': (Main.java:162): 'public' modifier changed to 'private' in renamed method
debug: type 'test.Main$B': method 'addedMethod():void': (Main.java:148): add
debug: type 'test.Main$B': method 'appendTestMethod(java.lang.String):void': (Main.java:210): append
debug: type 'test.Main$B': method 'prependTestMethod(java.lang.String):void': (Main.java:204): prepend
debug: type 'test.Main$B': method 'virtualMethod(java.lang.String):void': (Main.java:167): add
debug: type 'test.Main$B': method 'wrapTestMethod(java.lang.String):void': (Main.java:186): wrap
debug: type 'test.Main$Base': (Main.java:0): ignore
debug: type 'test.Main$C': (Main.java:0): edit
debug: type 'test.Main$C': field 'patchStaticField:int': (Main.java:0): add
warning: type 'test.Main$C': field 'patchStaticField:int': (Main.java:0): static field will not be initialized as specified in patch because code of static constructor of class is being discarded
debug: type 'test.Main$C': field 'redefinedSourceStaticField:int': (Main.java:0): edit
warning: type 'test.Main$C': field 'redefinedSourceStaticField:int': (Main.java:0): static field will not be initialized as specified in patch because code of static constructor of class is being discarded
debug: type 'test.Main$C': field 'patchField:int': (Main.java:0): add
debug: type 'test.Main$C': field 'redefinedSourceField:int': (Main.java:0): edit
debug: type 'test.Main$C': method '<clinit>():void': (Main.java:246): ignore
debug: type 'test.Main$C': method '<init>():void': (Main.java:268): ignore
debug: type 'test.Main$C': method 'print():void': (Main.java:276): append
debug: type 'test.Main$Concrete3': (Main.java:0): edit
info: type 'test.Main$Concrete3': method '<init>():void': (Main.java:562): implicit ignore of trivial default constructor
debug: type 'test.Main$Concrete3': method '<init>():void': (Main.java:562): ignore
debug: type 'test.Main$Concrete3': method 'method():void': (Main.java:565): replace
debug: type 'test.Main$CrossClassA': (Main.java:0): add
debug: type 'test.Main$CrossClassAHelper': (Main.java:0): edit
info: type 'test.Main$CrossClassAHelper': method '<init>():void': (Main.java:589): implicit ignore of trivial default constructor
debug: type 'test.Main$CrossClassAHelper': method '<init>():void': (Main.java:589): ignore
debug: type 'test.Main$CrossClassAHelper': method 'help2(test.Main$source_CrossClassA):void': (Main.java:591): add
debug: type 'test.Main$CrossClassBPatcher': (Main.java:0): edit
info: type 'test.Main$CrossClassBPatcher': target 'test.Main$CrossClassB': method '<init>():void': (Main.java:621): implicit ignore of trivial default constructor
debug: type 'test.Main$CrossClassBPatcher': target 'test.Main$CrossClassB': method '<init>():void': (Main.java:621): ignore
debug: type 'test.Main$CrossClassBPatcher': target 'test.Main$CrossClassB': method 'go():void': (Main.java:624): wrap
debug: type 'test.Main$CrossClassCPatcher': (Main.java:0): replace
debug: type 'test.Main$D': (Main.java:0): edit
debug: type 'test.Main$D': field 'patchStaticField:int': (Main.java:0): add
debug: type 'test.Main$D': field 'redefinedSourceStaticField:int': (Main.java:0): edit
debug: type 'test.Main$D': field 'patchField:int': (Main.java:0): add
debug: type 'test.Main$D': field 'redefinedSourceField:int': (Main.java:0): edit
debug: type 'test.Main$D': method '<clinit>():void': (Main.java:287): replace
debug: type 'test.Main$D': method '<init>():void': (Main.java:313): replace
debug: type 'test.Main$D': method 'print():void': (Main.java:322): append
debug: type 'test.Main$E': (Main.java:0): edit
debug: type 'test.Main$E': field 'patchStaticField:int': (Main.java:0): add
debug: type 'test.Main$E': field 'redefinedSourceStaticField:int': (Main.java:0): edit
debug: type 'test.Main$E': field 'patchField:int': (Main.java:0): add
debug: type 'test.Main$E': field 'redefinedSourceField:int': (Main.java:0): edit
info: type 'test.Main$E': method '<clinit>():void': (Main.java:335): default add
debug: type 'test.Main$E': method '<clinit>():void': (Main.java:335): add
debug: type 'test.Main$E': method '<init>(java.lang.String):void': (Main.java:383): add
debug: type 'test.Main$E': method '<init>(java.lang.String, java.lang.Void):void': (Main.java:370): edit
debug: type 'test.Main$E': method '<init>(java.lang.String, java.lang.Void):void': target '<init>(java.lang.String):void': (Main.java:370): 'public' modifier changed to 'private' in renamed method
debug: type 'test.Main$E': method 'source_static():void': (Main.java:346): edit
debug: type 'test.Main$E': method 'source_static():void': target '<clinit>': (Main.java:346): 'private' modifier added to renamed method
debug: type 'test.Main$E': method 'source_static():void': target '<clinit>': (Main.java:346): 'constructor' modifier removed from renamed method
debug: type 'test.Main$E': method 'print():void': (Main.java:389): append
debug: type 'test.Main$F': (Main.java:0): edit
debug: type 'test.Main$F': field 'patchStaticField:int': (Main.java:0): add
debug: type 'test.Main$F': field 'redefinedSourceStaticField:int': (Main.java:0): edit
debug: type 'test.Main$F': field 'patchField:int': (Main.java:0): add
debug: type 'test.Main$F': field 'redefinedSourceField:int': (Main.java:0): edit
debug: type 'test.Main$F': method '<clinit>():void': (Main.java:400): append
debug: type 'test.Main$F': method '<init>():void': (Main.java:420): ignore
debug: type 'test.Main$F': method 'print():void': (Main.java:428): append
debug: type 'test.Main$G': (Main.java:0): edit
debug: type 'test.Main$G': field 'patchStaticField:int': (Main.java:0): add
debug: type 'test.Main$G': field 'redefinedSourceStaticField:int': (Main.java:0): edit
info: type 'test.Main$G': method '<clinit>():void': (Main.java:447): implicit append of static constructor
debug: type 'test.Main$G': method '<clinit>():void': (Main.java:447): append
info: type 'test.Main$G': method '<init>():void': (Main.java:444): implicit ignore of trivial default constructor
debug: type 'test.Main$G': method '<init>():void': (Main.java:444): ignore
debug: type 'test.Main$G': method 'print():void': (Main.java:458): append
debug: type 'test.Main$H': (Main.java:0): edit
debug: type 'test.Main$H': field 'patchStaticField:int': (Main.java:0): add
info: type 'test.Main$H': method '<clinit>():void': (Main.java:473): implicit add of static constructor
debug: type 'test.Main$H': method '<clinit>():void': (Main.java:473): add
debug: type 'test.Main$H': method '<init>():void': (Main.java:481): ignore
debug: type 'test.Main$H': method 'print():void': (Main.java:485): append
debug: type 'test.Main$Interface': (Main.java:0): ignore
debug: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': decoded to 'test.Main$void'
debug: decode patch: annotation element value '__My_label_for_class_void_$$_void__': decoded to 'void'
debug: type 'test.Main$void': (Main.java:0): edit
warning: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': field '__bad_$$_invalid$aX1asciiLatin1Escape__': invalid escape sequence '$aX' in '__bad_$$_invalid[->]$aX[<-]1asciiLatin1Escape__'
debug: type 'test.Main$void': field '__bad_$$_invalid$aX1asciiLatin1Escape__:int': (Main.java:0): add
warning: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': field '__bad_$$_invalid$sescape__': invalid escape sequence '$s' in '__bad_$$_invalid[->]$s[<-]escape__'
debug: type 'test.Main$void': field '__bad_$$_invalid$sescape__:int': (Main.java:0): add
warning: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': field '__bad_$$_invalid$uB1unicodeEscape__': invalid escape sequence '$uB1u' in '__bad_$$_invalid[->]$uB1u[<-]nicodeEscape__'
debug: type 'test.Main$void': field '__bad_$$_invalid$uB1unicodeEscape__:int': (Main.java:0): add
warning: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': field '__bad_$$_invalid_character__': invalid character '_' in '__bad_$$_invalid[->]_[<-]character__'
debug: type 'test.Main$void': field '__bad_$$_invalid_character__:int': (Main.java:0): add
warning: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': field '__bad_$$_noEndMark_': missing end of code in '__bad[->]_$$_noEndMark_[<-]'
debug: type 'test.Main$void': field '__bad_$$_noEndMark_:int': (Main.java:0): add
warning: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': field '__bad_$$_truncatedAsciiLatin1Escape$aB__': invalid escape sequence '$aB' in '__bad_$$_truncatedAsciiLatin1Escape[->]$aB[<-]__'
debug: type 'test.Main$void': field '__bad_$$_truncatedAsciiLatin1Escape$aB__:int': (Main.java:0): add
warning: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': field '__bad_$$_truncatedEscape$__': invalid escape sequence '$' in '__bad_$$_truncatedEscape[->]$[<-]__'
debug: type 'test.Main$void': field '__bad_$$_truncatedEscape$__:int': (Main.java:0): add
warning: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': field '__bad_$$_truncatedUnicodeEscape$uB1__': invalid escape sequence '$uB1' in '__bad_$$_truncatedUnicodeEscape[->]$uB1[<-]__'
debug: type 'test.Main$void': field '__bad_$$_truncatedUnicodeEscape$uB1__:int': (Main.java:0): add
warning: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': field '__bad_emptyCode_$$__': empty code in '__bad_emptyCode[->]_$$__[<-]'
debug: type 'test.Main$void': field '__bad_emptyCode_$$__:int': (Main.java:0): add
warning: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': field '_bad_$$_noStartMark__': missing start of code in '[->]_bad_$$_[<-]noStartMark__'
debug: type 'test.Main$void': field '_bad_$$_noStartMark__:int': (Main.java:0): add
debug: decode source: type 'test.Main$__ClassVoid_$$_void__': method '__method42_$$_42__': decoded to '42'
info: type 'test.Main$void': method '<init>():void': (Main.java:650): implicit ignore of trivial default constructor
debug: type 'test.Main$void': method '<init>():void': (Main.java:650): ignore
debug: type 'test.Main$void': method 'printMethod(java.lang.String):void': (Main.java:653): ignore
debug: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': method '__$$_withoutLabel__': decoded to 'withoutLabel'
debug: type 'test.Main$void': method 'withoutLabel():void': (Main.java:706): add
debug: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': method '__my_label_for_method_42_$$_42__': decoded to '42'
debug: type 'test.Main$void': method '42():void': (Main.java:657): replace
debug: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': method '__ok_$$_with$SdollarEscape__': decoded to 'with$dollarEscape'
debug: type 'test.Main$void': method 'with$dollarEscape():void': (Main.java:707): add
debug: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': method '__ok_$$_with$UunderscoreEscape__': decoded to 'with_underscoreEscape'
debug: type 'test.Main$void': method 'with_underscoreEscape():void': (Main.java:708): add
debug: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': method '__ok_$$_with$aB1asciiLatin1Escape__': decoded to 'with±asciiLatin1Escape'
debug: type 'test.Main$void': method 'with±asciiLatin1Escape():void': (Main.java:709): add
debug: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': method '__ok_$$_with$u00B1unicodeEscape__': decoded to 'with±unicodeEscape'
debug: type 'test.Main$void': method 'with±unicodeEscape():void': (Main.java:710): add
warning: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': method '__prefix_$$_1____bad_infix_$$_$2__and__postfix_$$_3__': invalid escape sequence '$2' in '__bad_infix_$$_[->]$2[<-]__'
debug: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': method '__prefix_$$_1____bad_infix_$$_$2__and__postfix_$$_3__': decoded to '1__bad_infix_$$_$2__and3'
debug: type 'test.Main$void': method '1__bad_infix_$$_$2__and3():void': (Main.java:727): add
debug: decode patch: type 'test.Main$__My_label_for_class_void_$$_void__': method '__prefix_$$_1____infix_$$_2__and__postfix_$$_3__': decoded to '12and3'
debug: type 'test.Main$void': method '12and3():void': (Main.java:711): add
debug: type 'test.Main$void': method 'print():void': (Main.java:732): append
debug: type 'test.Main$source_CrossClassA': (Main.java:0): edit
debug: type 'test.Main$source_CrossClassA': target 'test.Main$CrossClassA': (Main.java:0): 'public' modifier removed from renamed type
debug: type 'test.Main$source_CrossClassA': target 'test.Main$CrossClassA': method '<init>(java.lang.String):void': (Main.java:582): ignore
debug: type 'test.Main$source_CrossClassA': target 'test.Main$CrossClassA': method 'go():void': (Main.java:584): ignore
debug: type 'test.Main': (Main.java:0): ignore
debug: type 'test.info.package-info': (package-info.java:0): replace
debug: type 'test.info.package-info': (package-info.java:0): replace package non-recursive
debug: type 'test.rec.package-info': (package-info.java:0): remove
debug: type 'test.rec.package-info': (package-info.java:0): remove package recursive
debug: type 'test.rec.package-info': (package-info.java:0): remove type 'test.rec.Rec'
debug: type 'test.rec.package-info': (package-info.java:0): remove type 'test.rec.inner.RecInner'
debug: type 'test.target.package-info': (package-info.java:0): remove
debug: type 'test.target.package-info': target 'test.nonrec.package-info': (package-info.java:0): remove package non-recursive
debug: type 'test.target.package-info': target 'test.nonrec.package-info': (package-info.java:0): remove type 'test.nonrec.NonRec'
debug: type 'test.Main$Concrete1': (Main.java:0): edit
info: type 'test.Main$Concrete1': method '<init>():void': (Main.java:514): implicit ignore of trivial default constructor
debug: type 'test.Main$Concrete1': method '<init>():void': (Main.java:514): ignore
debug: type 'test.Main$Concrete1': method 'abstractMethod():void': (Main.java:0): ignore
debug: type 'test.Main$Concrete1': method 'interfaceMethod():void': (Main.java:523): ignore
debug: type 'test.Main$Concrete1': method 'method():void': (Main.java:517): replace
debug: type 'test.Main$Concrete2': (Main.java:0): edit
info: type 'test.Main$Concrete2': method '<init>():void': (Main.java:551): implicit ignore of trivial default constructor
debug: type 'test.Main$Concrete2': method '<init>():void': (Main.java:551): ignore
debug: type 'test.Main$Concrete2': method 'method():void': (Main.java:554): replace
debug: type 'test.Main$Derived': (Main.java:0): edit
info: type 'test.Main$Derived': method '<init>():void': (Main.java:224): default ignore
debug: type 'test.Main$Derived': method '<init>():void': (Main.java:224): ignore
debug: type 'test.Main$Derived': method 'source_method():void': (Main.java:231): edit
debug: type 'test.Main$Derived': method 'source_method():void': target 'method': (Main.java:231): 'public' modifier changed to 'private' in renamed method
debug: type 'test.Main$Derived': method 'method():void': (Main.java:234): add
debug: reanonymize output: type 'test.Main$AnonymousClasses$Anon1$Anon1_Level2$Inner': reanonymized to 'test.Main$AnonymousClasses$1$1$Inner'
debug: reanonymize output: type 'test.Main$AnonymousClasses$Anon1$Anon1_Level2': reanonymized to 'test.Main$AnonymousClasses$1$1'
debug: reanonymize output: type 'test.Main$AnonymousClasses$Anon1': reanonymized to 'test.Main$AnonymousClasses$1'
debug: reanonymize output: type 'test.Main$AnonymousClasses$Anon1_Level2$Anon1_Level2': reanonymized to 'test.Main$AnonymousClasses$Anon1$1'
debug: reanonymize output: type 'test.Main$AnonymousClasses$Anon1_Level2': reanonymized to 'test.Main$AnonymousClasses$Anon1'
debug: reanonymize output: type 'test.Main$AnonymousClasses$Anon1_Level2$Anon1_Level4': reanonymized to 'test.Main$AnonymousClasses$Anon1$Anon1_Level2'
warning: reanonymize output: type 'test.Main$AnonymousClasses$42': cannot reanonymize 'Main$AnonymousClasses$42' by 1 level
info: write 'build/patched.dex'
debug: write 'build/patched.dex': dex version '035'
debug: write 'build/patched.dex': 34 types
0 error(s), 14 warning(s)

$ dex2jar --force --output build/patched-dex2jar.jar build/patched.dex
dex2jar build/patched.dex -> build/patched-dex2jar.jar
WARN: ignored invalid inner class name , treat as anonymous inner class.
WARN: ignored invalid inner class name , treat as anonymous inner class.
WARN: ignored invalid inner class name , treat as anonymous inner class.

--- run source/build/libs/source.jar ---
original A::<clinit>
original A::<init>

B::privateStaticMethod: 42 (private static void test.Main$B.privateStaticMethod(int))
B::privateKey: my-key (private java.lang.String test.Main$B.privateKey)
original B::directMethod
original B::virtualMethod: data
original B::wrapTestMethod: data
original B::prependTestMethod: data
original B::appendTestMethod: data

entering original Derived::method
original Base::method
exiting original Derived::method

original C::<clinit>
original C::<init>
C::sourceStaticField: 100
C::sourceField: 100
C::redefinedSourceStaticField: 100
C::redefinedSourceField: 100

original D::<clinit>
original D::<init>
D::sourceStaticField: 100
D::sourceField: 100
D::redefinedSourceStaticField: 100
D::redefinedSourceField: 100

original E::<clinit>
original E::<init>: data
E::sourceStaticField: 100
E::sourceField: 100
E::redefinedSourceStaticField: 100
E::redefinedSourceField: 100

original F::<clinit>
original F::<init>
F::sourceStaticField: 100
F::sourceField: 100
F::redefinedSourceStaticField: 100
F::redefinedSourceField: 100

original G::<clinit>
original G::<init>
G::sourceStaticField: 100
G::redefinedSourceStaticField: 100

original H::<init>

Concrete1::interfaceMethod
Concrete1::abstractMethod
original Concrete1::method

Concrete2::interfaceMethod
Concrete2::abstractMethod
original Concrete2::method

Concrete3::interfaceMethod
Concrete3::abstractMethod
original Concrete3::method

original CrossClassA::go: data (class test.Main$CrossClassA)
original CrossClassA::help1 (class test.Main$CrossClassA)
original CrossClassAHelper::help2(CrossClassA)

original CrossClassB::go: data (class test.Main$CrossClassB)

original CrossClassC::<clinit>
original CrossClassC::<init>

original void::<init> (class test.Main$__ClassVoid_$$_void__)
original void::__method42_$$_42__

original AnonymousClasses::<anon>::run
original AnonymousClasses::<anon>::<anon>::run
original AnonymousClasses::Anon1::go

--- end source/build/libs/source.jar ---

--- run build/patched-dex2jar.jar ---
replaced A::<clinit>
replaced A::<init>

B::privateStaticMethod: 42 (public static void test.Main$B.privateStaticMethod(int))
B::privateKey: my-key (public java.lang.String test.Main$B.privateKey)
replaced B::directMethod
B::staticField: 100   <-- initialized
B::instanceField: 0   <-- *not* initialized
B::addedMethod
entering replaced B::virtualMethod: data
original B::virtualMethod: filtered data
exiting replaced B::virtualMethod
entering wrapper B::wrapTestMethod: data
original B::wrapTestMethod: filtered data
exiting wrapper B::wrapTestMethod
prepended B::prependTestMethod: data
original B::prependTestMethod: data
original B::appendTestMethod: data
appended B::appendTestMethod: data

entering replaced Derived::method
entering original Derived::method
original Base::method
exiting original Derived::method
exiting replaced Derived::method

original C::<clinit>
original C::<init>
C::sourceStaticField: 100
C::sourceField: 100
C::redefinedSourceStaticField: 100
C::redefinedSourceField: 100
C::patchStaticField: 0
C::patchField: 0

replaced D::<clinit>
replaced D::<init>
D::sourceStaticField: 0
D::sourceField: 0
D::redefinedSourceStaticField: 200
D::redefinedSourceField: 200
D::patchStaticField: 200
D::patchField: 200

entering replaced E::<clinit>
original E::<clinit>
exiting replaced E::<clinit>
original E::<init>: filtered data
continuing on replaced E::<init>: data
E::sourceStaticField: 100
E::sourceField: 100
E::redefinedSourceStaticField: 100
E::redefinedSourceField: 100
E::patchStaticField: 200
E::patchField: 0

original F::<clinit>
appended F::<clinit>
original F::<init>
F::sourceStaticField: 100
F::sourceField: 100
F::redefinedSourceStaticField: 200
F::redefinedSourceField: 100
F::patchStaticField: 200
F::patchField: 0

original G::<clinit>
appended G::<clinit>
original G::<init>
G::sourceStaticField: 100
G::redefinedSourceStaticField: 200
G::patchStaticField: 200

added H::<clinit>
original H::<init>
H::patchStaticField: 200

Concrete1::interfaceMethod
Concrete1::abstractMethod
replaced Concrete1::method

Concrete2::interfaceMethod
Concrete2::abstractMethod
replaced Concrete2::method

Concrete3::interfaceMethod
Concrete3::abstractMethod
replaced Concrete3::method

entering replaced CrossClassA::go (class test.Main$CrossClassA)
original CrossClassA::go: filtered data for a1 (class test.Main$source_CrossClassA)
original CrossClassA::help1 (class test.Main$source_CrossClassA)
added CrossClassAHelper::help2(source_CrossClassA)
original CrossClassA::go: filtered data for a2 (class test.Main$source_CrossClassA)
original CrossClassA::help1 (class test.Main$source_CrossClassA)
added CrossClassAHelper::help2(source_CrossClassA)
exiting replaced CrossClassA::go

entering wrapper CrossClassBPatcher::go (class test.Main$CrossClassB)
original CrossClassB::go: data (class test.Main$CrossClassB)
exiting wrapper CrossClassBPatcher::go

replaced CrossClassCPatcher::<clinit> (class test.Main$CrossClassC)
replaced CrossClassCPatcher::<init> (class test.Main$CrossClassC)

original void::<init> (class test.Main$void)
replaced void::42
added void::withoutLabel
added void::with$dollarEscape
added void::with_underscoreEscape
added void::with±asciiLatin1Escape
added void::with±unicodeEscape
added void::12and3
added void::1__bad_infix_$$_$2__and3

original AnonymousClasses::<anon>::run
replaced AnonymousClasses::<anon>::<anon>::run
original AnonymousClasses::Anon1::go
added AnonymousClasses::<anon> (class test.Main$AnonymousClasses$1_patch)

--- end build/patched-dex2jar.jar ---

