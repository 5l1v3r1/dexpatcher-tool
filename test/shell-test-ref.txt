$ dx --dex --output build/source.dex source/build/libs/source.jar

$ dx --dex --output build/patch.dex patch/build/libs/patch.jar

$ dexpatcher --help
DexPatcher Version 1.3.0 by Lanchon
           https://dexpatcher.github.io/
usage: dexpatcher [<option> ...] [--output <patched-dex-or-dir>]
                  <source-dex-apk-or-dir> [<patch-dex-apk-or-dir> ...]
 -?,--help                    print this help message and exit
 -a,--api-level <n>           android api level (default: auto-detect)
    --annotations <package>   package name of DexPatcher annotations
                              (default: 'lanchon.dexpatcher.annotation')
    --compat-dextag           enable support for the deprecated DexTag
    --debug                   output debugging information
    --dry-run                 do not write output files (much faster)
 -J,--multi-dex-jobs <n>      multi-dex thread count (implies: -m -M)
                              (default: available processors up to 4)
 -M,--multi-dex-threaded      multi-threaded multi-dex (implies: -m)
 -m,--multi-dex               enable multi-dex support
    --max-dex-pool-size <n>   maximum size of dex pools (default: 65536)
 -o,--output <dex-or-dir>     name of output file or directory
 -p,--path                    output relative paths of source code files
    --path-root <root>        output absolute paths of source code files
 -q,--quiet                   do not output warnings
    --stats                   output timing statistics
 -v,--verbose                 output extra information
    --version                 print version information and exit

$ dexpatcher build/source.dex build/patch.dex --output build/patched.dex --debug
info: read 'build/source.dex'
debug: read 'build/source.dex': 17 types
debug: read 'build/source.dex': dex version '035'
info: read 'build/patch.dex'
debug: read 'build/patch.dex': 16 types
debug: read 'build/patch.dex': dex version '035'
debug: type 'test.Main$A': (Main.java:0): replace
debug: type 'test.Main$Abstract': (Main.java:0): ignore
debug: type 'test.Main$B': (Main.java:0): edit
debug: type 'test.Main$B': static field 'staticField:int': (Main.java:0): add
debug: type 'test.Main$B': instance field 'instanceField:int': (Main.java:0): add
debug: type 'test.Main$B': instance field 'privateKey:java.lang.String': (Main.java:0): edit
info: type 'test.Main$B': instance field 'privateKey:java.lang.String': (Main.java:0): 'private' modifier changed to 'public' in edited field
debug: type 'test.Main$B': direct method '<clinit>():void': (Main.java:96): add
debug: type 'test.Main$B': direct method '<init>():void': (Main.java:117): ignore
debug: type 'test.Main$B': direct method 'directMethod():void': (Main.java:137): replace
debug: type 'test.Main$B': direct method 'privateStaticMethod(int):void': (Main.java:132): edit
info: type 'test.Main$B': direct method 'privateStaticMethod(int):void': (Main.java:132): 'private' modifier changed to 'public' in edited method
debug: type 'test.Main$B': virtual method 'addedMethod():void': (Main.java:121): add
debug: type 'test.Main$B': virtual method 'anotherMethod(java.lang.String):void': (Main.java:171): wrap
debug: type 'test.Main$B': virtual method 'source_virtualMethod(java.lang.String):void': (Main.java:147): edit
debug: type 'test.Main$B': virtual method 'source_virtualMethod(java.lang.String):void': target 'virtualMethod': (Main.java:147): 'public' modifier changed to 'protected' in renamed method
debug: type 'test.Main$B': virtual method 'virtualMethod(java.lang.String):void': (Main.java:152): add
debug: type 'test.Main$Base': (Main.java:0): ignore
debug: type 'test.Main$C': (Main.java:0): edit
debug: type 'test.Main$C': static field 'patchStaticField:int': (Main.java:0): add
warning: type 'test.Main$C': static field 'patchStaticField:int': (Main.java:0): static field will not be initialized as specified in patch because static constructor of class is being ignored
debug: type 'test.Main$C': static field 'redefinedSourceStaticField:int': (Main.java:0): edit
warning: type 'test.Main$C': static field 'redefinedSourceStaticField:int': (Main.java:0): static field will not be initialized as specified in patch because static constructor of class is being ignored
debug: type 'test.Main$C': instance field 'patchField:int': (Main.java:0): add
debug: type 'test.Main$C': instance field 'redefinedSourceField:int': (Main.java:0): edit
debug: type 'test.Main$C': direct method '<clinit>():void': (Main.java:209): ignore
debug: type 'test.Main$C': direct method '<init>():void': (Main.java:231): ignore
debug: type 'test.Main$C': virtual method 'print():void': (Main.java:239): wrap
debug: type 'test.Main$Interface': (Main.java:0): ignore
debug: type 'test.Main$Concrete1': (Main.java:0): edit
debug: type 'test.Main$Concrete1': direct method '<init>():void': (Main.java:388): ignore
debug: type 'test.Main$Concrete1': virtual method 'abstractMethod():void': (Main.java:0): ignore
debug: type 'test.Main$Concrete1': virtual method 'interfaceMethod():void': (Main.java:397): ignore
debug: type 'test.Main$Concrete1': virtual method 'method():void': (Main.java:391): replace
debug: type 'test.Main$Concrete2': (Main.java:0): edit
debug: type 'test.Main$Concrete2': direct method '<init>():void': (Main.java:420): ignore
debug: type 'test.Main$Concrete2': virtual method 'method():void': (Main.java:423): replace
debug: type 'test.Main$Concrete3': (Main.java:0): edit
debug: type 'test.Main$Concrete3': direct method '<init>():void': (Main.java:433): ignore
debug: type 'test.Main$Concrete3': virtual method 'method():void': (Main.java:436): replace
debug: type 'test.Main$D': (Main.java:0): edit
debug: type 'test.Main$D': static field 'patchStaticField:int': (Main.java:0): add
debug: type 'test.Main$D': static field 'redefinedSourceStaticField:int': (Main.java:0): edit
debug: type 'test.Main$D': instance field 'patchField:int': (Main.java:0): add
debug: type 'test.Main$D': instance field 'redefinedSourceField:int': (Main.java:0): edit
debug: type 'test.Main$D': direct method '<clinit>():void': (Main.java:251): replace
debug: type 'test.Main$D': direct method '<init>():void': (Main.java:277): replace
debug: type 'test.Main$D': virtual method 'print():void': (Main.java:286): wrap
debug: type 'test.Main$Derived': (Main.java:0): edit
info: type 'test.Main$Derived': direct method '<init>():void': (Main.java:187): default ignore
debug: type 'test.Main$Derived': direct method '<init>():void': (Main.java:187): ignore
debug: type 'test.Main$Derived': virtual method 'method():void': (Main.java:197): add
debug: type 'test.Main$Derived': virtual method 'source_method():void': (Main.java:194): edit
debug: type 'test.Main$Derived': virtual method 'source_method():void': target 'method': (Main.java:194): 'public' modifier changed to 'protected' in renamed method
debug: type 'test.Main$E': (Main.java:0): edit
debug: type 'test.Main$E': static field 'patchStaticField:int': (Main.java:0): add
debug: type 'test.Main$E': static field 'redefinedSourceStaticField:int': (Main.java:0): edit
debug: type 'test.Main$E': instance field 'patchField:int': (Main.java:0): add
debug: type 'test.Main$E': instance field 'redefinedSourceField:int': (Main.java:0): edit
info: type 'test.Main$E': direct method '<clinit>():void': (Main.java:300): default add
debug: type 'test.Main$E': direct method '<clinit>():void': (Main.java:300): add
debug: type 'test.Main$E': direct method '<init>(java.lang.String):void': (Main.java:352): add
debug: type 'test.Main$E': direct method '<init>(java.lang.String, java.lang.Void):void': (Main.java:339): edit
debug: type 'test.Main$E': direct method '<init>(java.lang.String, java.lang.Void):void': target '<init>(java.lang.String):void': (Main.java:339): 'public' modifier changed to 'private' in renamed method
debug: type 'test.Main$E': direct method 'source_static():void': (Main.java:311): edit
debug: type 'test.Main$E': direct method 'source_static():void': target '<clinit>': (Main.java:311): 'private' modifier added to renamed method
debug: type 'test.Main$E': direct method 'source_static():void': target '<clinit>': (Main.java:311): 'constructor' modifier removed from renamed method
debug: type 'test.Main$E': virtual method 'print():void': (Main.java:358): wrap
debug: type 'test.Main': (Main.java:0): ignore
debug: type 'test.info.package-info': (package-info.java:0): replace
debug: type 'test.info.package-info': (package-info.java:0): replace package non-recursive
debug: type 'test.rec.package-info': (package-info.java:0): remove
debug: type 'test.rec.package-info': (package-info.java:0): remove package recursive
debug: type 'test.rec.package-info': (package-info.java:0): remove type 'Ltest/rec/Rec;'
debug: type 'test.rec.package-info': (package-info.java:0): remove type 'Ltest/rec/inner/RecInner;'
debug: type 'test.target.package-info': (package-info.java:0): remove
debug: type 'test.target.package-info': target 'test.nonrec.package-info': (package-info.java:0): remove package non-recursive
debug: type 'test.target.package-info': target 'test.nonrec.package-info': (package-info.java:0): remove type 'Ltest/nonrec/NonRec;'
info: write 'build/patched.dex'
debug: write 'build/patched.dex': dex version '035'
debug: write 'build/patched.dex': 15 types
0 error(s), 2 warning(s)

$ dex2jar --force --output build/patched-dex2jar.jar build/patched.dex
dex2jar build/patched.dex -> build/patched-dex2jar.jar

--- run source/build/libs/source.jar ---
original A::<clinit>
original A::<init>

B::staticMethod: 42
original B::directMethod
original B::virtualMethod: data
original B::anotherMethod: data

entering original Derived::method
original Base::method
exiting original Derived::method

original C::<clinit>
original C::<init>
C::sourceStaticField: 100
C::sourceField: 100
C::redefinedSourceStaticField: 100
C::redefinedSourceField: 100

original D::<clinit>
original D::<init>
D::sourceStaticField: 100
D::sourceField: 100
D::redefinedSourceStaticField: 100
D::redefinedSourceField: 100

original E::<clinit>
original E::<init>: data
E::sourceStaticField: 100
E::sourceField: 100
E::redefinedSourceStaticField: 100
E::redefinedSourceField: 100

Concrete1::interfaceMethod
Concrete1::abstractMethod
original Concrete1::method

Concrete2::interfaceMethod
Concrete2::abstractMethod
original Concrete2::method

Concrete3::interfaceMethod
Concrete3::abstractMethod
original Concrete3::method
--- end source/build/libs/source.jar ---

--- run build/patched-dex2jar.jar ---
replaced A::<clinit>
replaced A::<init>

B::staticMethod: 42
replaced B::directMethod
B::staticField: 100   <-- initialized
B::instanceField: 0   <-- *not* initialized
B::addedMethod
B::privateKey: my-key
entering replaced B::virtualMethod: data
original B::virtualMethod: filtered data
exiting replaced B::virtualMethod
entering wrapper B::anotherMethod: data
original B::anotherMethod: filtered data
exiting wrapper B::anotherMethod

entering replaced Derived::method
entering original Derived::method
original Base::method
exiting original Derived::method
exiting replaced Derived::method

original C::<clinit>
original C::<init>
C::sourceStaticField: 100
C::sourceField: 100
C::redefinedSourceStaticField: 100
C::redefinedSourceField: 100
C::patchStaticField: 0
C::patchField: 0

replaced D::<clinit>
replaced D::<init>
D::sourceStaticField: 0
D::sourceField: 0
D::redefinedSourceStaticField: 200
D::redefinedSourceField: 200
D::patchStaticField: 200
D::patchField: 200

entering replaced E::<clinit>
original E::<clinit>
exiting replaced E::<clinit>
original E::<init>: filtered data
continuing on replaced E::<init>: data
E::sourceStaticField: 100
E::sourceField: 100
E::redefinedSourceStaticField: 100
E::redefinedSourceField: 100
E::patchStaticField: 200
E::patchField: 0

Concrete1::interfaceMethod
Concrete1::abstractMethod
replaced Concrete1::method

Concrete2::interfaceMethod
Concrete2::abstractMethod
replaced Concrete2::method

Concrete3::interfaceMethod
Concrete3::abstractMethod
replaced Concrete3::method
--- end build/patched-dex2jar.jar ---

