$ dx --dex --output build/source.dex source/build/libs/source.jar

$ dx --dex --output build/patch.dex patch/build/libs/patch.jar

$ dexpatcher --help
DexPatcher Version 1.2.0-beta2.1 by Lanchon
           https://dexpatcher.github.io/
usage: dexpatcher [<option> ...] [--output <patched-dex-or-dir>]
                  <source-dex-apk-or-dir> [<patch-dex-apk-or-dir> ...]
 -?,--help                    print this help message and exit
 -a,--api-level <n>           android api level (default: auto-detect)
    --annotations <package>   package name of DexPatcher annotations
                              (default: 'lanchon.dexpatcher.annotation')
    --compat-dextag           enable support for the deprecated DexTag
    --debug                   output debugging information
    --dry-run                 do not write output files (much faster)
 -J,--multi-dex-jobs <n>      multi-dex thread count (implies: -m -M)
                              (default: available processors up to 4)
 -M,--multi-dex-threaded      multi-threaded multi-dex (implies: -m)
 -m,--multi-dex               enable multi-dex support
    --max-dex-pool-size <n>   maximum size of dex pools (default: 65536)
 -o,--output <dex-or-dir>     name of output file or directory
 -p,--path                    output relative paths of source code files
    --path-root <root>        output absolute paths of source code files
 -q,--quiet                   do not output warnings
    --stats                   output timing statistics
 -v,--verbose                 output extra information
    --version                 print version information and exit

$ dexpatcher build/source.dex build/patch.dex --output build/patched.dex --debug
info: read 'build/source.dex'
debug: read 'build/source.dex': 17 types
debug: read 'build/source.dex': dex version '035'
info: read 'build/patch.dex'
debug: read 'build/patch.dex': 23 types
debug: read 'build/patch.dex': dex version '035'
debug: type 'lanchon.dexpatcher.annotation.DexAction': (DexAction.java:0): ignore
debug: type 'lanchon.dexpatcher.annotation.DexAdd': (DexAdd.java:0): ignore
debug: type 'lanchon.dexpatcher.annotation.DexEdit': (DexEdit.java:0): ignore
debug: type 'lanchon.dexpatcher.annotation.DexIgnore': (DexIgnore.java:0): ignore
debug: type 'lanchon.dexpatcher.annotation.DexRemove': (DexRemove.java:0): ignore
debug: type 'lanchon.dexpatcher.annotation.DexReplace': (DexReplace.java:0): ignore
debug: type 'lanchon.dexpatcher.annotation.DexTarget': (DexTarget.java:0): ignore
debug: type 'test.Main$A': (Main.java:0): replace
debug: type 'test.Main$Abstract': (Main.java:0): ignore
debug: type 'test.Main$B': (Main.java:0): edit
debug: type 'test.Main$B': static field 'staticField:int': (Main.java:0): add
debug: type 'test.Main$B': instance field 'instanceField:int': (Main.java:0): add
debug: type 'test.Main$B': instance field 'privateKey:java.lang.String': (Main.java:0): edit
info: type 'test.Main$B': instance field 'privateKey:java.lang.String': (Main.java:0): 'public' modifier added to edited field
info: type 'test.Main$B': instance field 'privateKey:java.lang.String': (Main.java:0): 'private' modifier removed from edited field
debug: type 'test.Main$B': direct method '<clinit>():void': (Main.java:79): add
debug: type 'test.Main$B': direct method '<init>():void': (Main.java:100): ignore
debug: type 'test.Main$B': direct method 'directMethod():void': (Main.java:120): replace
debug: type 'test.Main$B': direct method 'privateStaticMethod(int):void': (Main.java:115): edit
info: type 'test.Main$B': direct method 'privateStaticMethod(int):void': (Main.java:115): 'public' modifier added to edited method
info: type 'test.Main$B': direct method 'privateStaticMethod(int):void': (Main.java:115): 'private' modifier removed from edited method
debug: type 'test.Main$B': virtual method 'addedMethod():void': (Main.java:104): add
debug: type 'test.Main$B': virtual method 'source_virtualMethod(java.lang.String):void': (Main.java:130): edit
debug: type 'test.Main$B': virtual method 'source_virtualMethod(java.lang.String):void': target 'virtualMethod': (Main.java:130): 'public' modifier removed from renamed method
debug: type 'test.Main$B': virtual method 'source_virtualMethod(java.lang.String):void': target 'virtualMethod': (Main.java:130): 'protected' modifier added to renamed method
debug: type 'test.Main$B': virtual method 'virtualMethod(java.lang.String):void': (Main.java:135): add
debug: type 'test.Main$Base': (Main.java:0): ignore
debug: type 'test.Main$C': (Main.java:0): edit
debug: type 'test.Main$C': static field 'patchStaticField:int': (Main.java:0): add
warning: type 'test.Main$C': static field 'patchStaticField:int': (Main.java:0): static field will not be initialized as specified in patch because the static constructor code in patch is being ignored
debug: type 'test.Main$C': static field 'redefinedSourceStaticField:int': (Main.java:0): edit
warning: type 'test.Main$C': static field 'redefinedSourceStaticField:int': (Main.java:0): static field will not be initialized as specified in patch because the static constructor code in patch is being ignored
debug: type 'test.Main$C': instance field 'patchField:int': (Main.java:0): add
debug: type 'test.Main$C': instance field 'redefinedSourceField:int': (Main.java:0): edit
debug: type 'test.Main$C': direct method '<clinit>():void': (Main.java:172): ignore
debug: type 'test.Main$C': direct method '<init>():void': (Main.java:194): ignore
debug: type 'test.Main$C': virtual method 'print():void': (Main.java:204): add
debug: type 'test.Main$C': virtual method 'source_print():void': (Main.java:201): edit
debug: type 'test.Main$C': virtual method 'source_print():void': target 'print': (Main.java:201): 'public' modifier removed from renamed method
debug: type 'test.Main$C': virtual method 'source_print():void': target 'print': (Main.java:201): 'protected' modifier added to renamed method
debug: type 'test.Main$Interface': (Main.java:0): ignore
debug: type 'test.Main$Concrete1': (Main.java:0): edit
debug: type 'test.Main$Concrete1': direct method '<init>():void': (Main.java:360): ignore
debug: type 'test.Main$Concrete1': virtual method 'abstractMethod():void': (Main.java:0): ignore
debug: type 'test.Main$Concrete1': virtual method 'interfaceMethod():void': (Main.java:369): ignore
debug: type 'test.Main$Concrete1': virtual method 'method():void': (Main.java:363): replace
debug: type 'test.Main$Concrete2': (Main.java:0): edit
debug: type 'test.Main$Concrete2': direct method '<init>():void': (Main.java:392): ignore
debug: type 'test.Main$Concrete2': virtual method 'method():void': (Main.java:395): replace
debug: type 'test.Main$Concrete3': (Main.java:0): edit
debug: type 'test.Main$Concrete3': direct method '<init>():void': (Main.java:408): ignore
debug: type 'test.Main$Concrete3': virtual method 'method():void': (Main.java:411): replace
debug: type 'test.Main$D': (Main.java:0): edit
debug: type 'test.Main$D': static field 'patchStaticField:int': (Main.java:0): add
debug: type 'test.Main$D': static field 'redefinedSourceStaticField:int': (Main.java:0): edit
debug: type 'test.Main$D': instance field 'patchField:int': (Main.java:0): add
debug: type 'test.Main$D': instance field 'redefinedSourceField:int': (Main.java:0): edit
debug: type 'test.Main$D': direct method '<clinit>():void': (Main.java:219): replace
debug: type 'test.Main$D': direct method '<init>():void': (Main.java:245): replace
debug: type 'test.Main$D': virtual method 'print():void': (Main.java:256): add
debug: type 'test.Main$D': virtual method 'source_print():void': (Main.java:253): edit
debug: type 'test.Main$D': virtual method 'source_print():void': target 'print': (Main.java:253): 'public' modifier removed from renamed method
debug: type 'test.Main$D': virtual method 'source_print():void': target 'print': (Main.java:253): 'protected' modifier added to renamed method
debug: type 'test.Main$Derived': (Main.java:0): edit
info: type 'test.Main$Derived': direct method '<init>():void': (Main.java:151): default ignore
debug: type 'test.Main$Derived': direct method '<init>():void': (Main.java:151): ignore
debug: type 'test.Main$Derived': virtual method 'method():void': (Main.java:160): add
debug: type 'test.Main$Derived': virtual method 'source_method():void': (Main.java:157): edit
debug: type 'test.Main$Derived': virtual method 'source_method():void': target 'method': (Main.java:157): 'public' modifier removed from renamed method
debug: type 'test.Main$Derived': virtual method 'source_method():void': target 'method': (Main.java:157): 'protected' modifier added to renamed method
debug: type 'test.Main$E': (Main.java:0): edit
debug: type 'test.Main$E': static field 'patchStaticField:int': (Main.java:0): add
debug: type 'test.Main$E': static field 'redefinedSourceStaticField:int': (Main.java:0): edit
debug: type 'test.Main$E': instance field 'patchField:int': (Main.java:0): add
debug: type 'test.Main$E': instance field 'redefinedSourceField:int': (Main.java:0): edit
info: type 'test.Main$E': direct method '<clinit>():void': (Main.java:270): default add
debug: type 'test.Main$E': direct method '<clinit>():void': (Main.java:270): add
debug: type 'test.Main$E': direct method '<init>(java.lang.String):void': (Main.java:322): add
debug: type 'test.Main$E': direct method '<init>(java.lang.String, java.lang.Void):void': (Main.java:309): edit
debug: type 'test.Main$E': direct method '<init>(java.lang.String, java.lang.Void):void': target '<init>(java.lang.String):void': (Main.java:309): 'public' modifier removed from renamed method
debug: type 'test.Main$E': direct method '<init>(java.lang.String, java.lang.Void):void': target '<init>(java.lang.String):void': (Main.java:309): 'private' modifier added to renamed method
debug: type 'test.Main$E': direct method 'source_static():void': (Main.java:281): edit
debug: type 'test.Main$E': direct method 'source_static():void': target '<clinit>': (Main.java:281): 'private' modifier added to renamed method
debug: type 'test.Main$E': direct method 'source_static():void': target '<clinit>': (Main.java:281): 'constructor' modifier removed from renamed method
debug: type 'test.Main$E': virtual method 'print():void': (Main.java:330): add
debug: type 'test.Main$E': virtual method 'source_print():void': (Main.java:327): edit
debug: type 'test.Main$E': virtual method 'source_print():void': target 'print': (Main.java:327): 'public' modifier removed from renamed method
debug: type 'test.Main$E': virtual method 'source_print():void': target 'print': (Main.java:327): 'protected' modifier added to renamed method
debug: type 'test.Main': (Main.java:0): ignore
debug: type 'test.info.package-info': (package-info.java:0): replace
debug: type 'test.info.package-info': (package-info.java:0): replace package non-recursive
debug: type 'test.rec.package-info': (package-info.java:0): remove
debug: type 'test.rec.package-info': (package-info.java:0): remove package recursive
debug: type 'test.rec.package-info': (package-info.java:0): remove type 'Ltest/rec/Rec;'
debug: type 'test.rec.package-info': (package-info.java:0): remove type 'Ltest/rec/inner/RecInner;'
debug: type 'test.target.package-info': (package-info.java:0): remove
debug: type 'test.target.package-info': target 'test.nonrec.package-info': (package-info.java:0): remove package non-recursive
debug: type 'test.target.package-info': target 'test.nonrec.package-info': (package-info.java:0): remove type 'Ltest/nonrec/NonRec;'
info: write 'build/patched.dex'
debug: write 'build/patched.dex': dex version '035'
debug: write 'build/patched.dex': 15 types
0 error(s), 2 warning(s)

$ dex2jar --force --output build/patched-dex2jar.jar build/patched.dex
dex2jar build/patched.dex -> build/patched-dex2jar.jar

--- run source/build/libs/source.jar ---
original A::<clinit>
original A::<init>

B::staticMethod: 42
original B::directMethod
original B::virtualMethod: data

entering original Derived::method
original Base::method
exiting original Derived::method

original C::<clinit>
original C::<init>
C::sourceStaticField: 100
C::sourceField: 100
C::redefinedSourceStaticField: 100
C::redefinedSourceField: 100

original D::<clinit>
original D::<init>
D::sourceStaticField: 100
D::sourceField: 100
D::redefinedSourceStaticField: 100
D::redefinedSourceField: 100

original E::<clinit>
original E::<init>: data
E::sourceStaticField: 100
E::sourceField: 100
E::redefinedSourceStaticField: 100
E::redefinedSourceField: 100

Concrete1::interfaceMethod
Concrete1::abstractMethod
original Concrete1::method

Concrete2::interfaceMethod
Concrete2::abstractMethod
original Concrete2::method

Concrete3::interfaceMethod
Concrete3::abstractMethod
original Concrete3::method
--- end source/build/libs/source.jar ---

--- run build/patched-dex2jar.jar ---
replaced A::<clinit>
replaced A::<init>

B::staticMethod: 42
replaced B::directMethod
B::staticField: 100   <-- initialized
B::instanceField: 0   <-- *not* initialized
B::addedMethod
B::privateKey: my-key
entering replaced B::virtualMethod: data
original B::virtualMethod: filtered data
exiting replaced B::virtualMethod

entering replaced Derived::method
entering original Derived::method
original Base::method
exiting original Derived::method
exiting replaced Derived::method

original C::<clinit>
original C::<init>
C::sourceStaticField: 100
C::sourceField: 100
C::redefinedSourceStaticField: 100
C::redefinedSourceField: 100
C::patchStaticField: 0
C::patchField: 0

replaced D::<clinit>
replaced D::<init>
D::sourceStaticField: 0
D::sourceField: 0
D::redefinedSourceStaticField: 200
D::redefinedSourceField: 200
D::patchStaticField: 200
D::patchField: 200

entering replaced E::<clinit>
original E::<clinit>
exiting replaced E::<clinit>
original E::<init>: filtered data
continuing on replaced E::<init>: data
E::sourceStaticField: 100
E::sourceField: 100
E::redefinedSourceStaticField: 100
E::redefinedSourceField: 100
E::patchStaticField: 200
E::patchField: 0

Concrete1::interfaceMethod
Concrete1::abstractMethod
replaced Concrete1::method

Concrete2::interfaceMethod
Concrete2::abstractMethod
replaced Concrete2::method

Concrete3::interfaceMethod
Concrete3::abstractMethod
replaced Concrete3::method
--- end build/patched-dex2jar.jar ---

